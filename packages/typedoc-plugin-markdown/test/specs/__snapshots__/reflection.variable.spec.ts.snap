// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Variable Reflection should compile type operator variable: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ( [Readme](../README.md) \\| API )

***

[typedoc-stubs](../exports.md) / typeOperatorVariable

# Variable: typeOperatorVariable

> **\`const\`** **typeOperatorVariable**: unique \`symbol\`

Comments for typeOperatorVariable

## Source

[variables.ts:13](http://source-url)
"
`;

exports[`Variable Reflection should compile type operator variable: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[typedoc-stubs](../index.md) / typeOperatorVariable

# typeOperatorVariable

\`\`\`ts
const typeOperatorVariable: unique symbol;
\`\`\`

Comments for typeOperatorVariable

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Variable Reflection should compile variable assigned to a string: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ( [Readme](../README.md) \\| API )

***

[typedoc-stubs](../exports.md) / stringVariable

# Variable: stringVariable

> **\`const\`** **stringVariable**: \`"stringConstWithDefaultValue"\` = \`'stringConstWithDefaultValue'\`

A simple string variable

## Source

[variables.ts:8](http://source-url)
"
`;

exports[`Variable Reflection should compile variable assigned to a string: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[typedoc-stubs](../index.md) / stringVariable

# stringVariable

\`\`\`ts
const stringVariable: "stringConstWithDefaultValue" = 'stringConstWithDefaultValue';
\`\`\`

A simple string variable

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Variable Reflection should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ( [Readme](../README.md) \\| API )

***

[typedoc-stubs](../exports.md) / objectLiteralVariable

# Variable: objectLiteralVariable

> **\`const\`** **objectLiteralVariable**: \`object\`

Comments for objectLiteralVariable

## Type declaration

### \\*

> **\\***: \`string\` = \`'*'\`

### \\*foo\\*

> **\\*foo\\***: \`string\` = \`'*foo*'\`

### \\<

> **\\<**: \`string\` = \`'<'\`

### \\<foo

> **\\<foo**: \`string\` = \`'<foo'\`

### \\<foo\\>

> **\\<foo\\>**: \`string\` = \`'<foo>'\`

### \\>

> **\\>**: \`string\` = \`'>'\`

### \\_

> **\\_**: \`string\` = \`'_'\`

### \\_foo\\_

> **\\_foo\\_**: \`string\` = \`'_foo_'\`

### prop\\_with\\_underscore

> **prop\\_with\\_underscore**: \`string\` = \`'prop_with_underscore'\`

### prop\\|with\\|pipes

> **prop\\|with\\|pipes**: \`string\` = \`'prop|with|pipes'\`

### valueA

> **valueA**: \`number\` = \`100\`

### valueB

> **valueB**: \`boolean\` = \`true\`

### valueX

> **valueX**: \`object\`

### valueX.valueA

> **valueX.valueA**: \`number\`[]

### valueX.valueY

> **valueX.valueY**: (\`z\`) => \`object\`

#### Parameters

▪ **z**: \`string\`

#### Returns

> ##### a
>
> > **a**: \`string\` = \`'test'\`
>
> ##### b
>
> > **b**: \`string\` = \`z\`
>
> ##### c
>
> > **c**: \`object\`
>
> ##### c.a
>
> > **c.a**: \`number\` = \`1\`
>
> ##### c.b
>
> > **c.b**: \`number\` = \`2\`
>

### valueX.valueZ

> **valueX.valueZ**: \`string\` = \`'foo'\`

### valueY

> **valueY**: (\`unionParam\`, \`_undercoreParam_\`) => \`string\`

#### Parameters

▪ **unionParam**: \`"a"\` \\| \`"b"\`

▪ **\\_undercoreParam\\_**: \`string\`

### \\|

> **\\|**: \`string\` = \`'|'\`

### ~

> **~**: \`string\` = \`'~'\`

## Source

[variables.ts:18](http://source-url)
"
`;

exports[`Variable Reflection should compile variable assigned to an object literal: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[typedoc-stubs](../index.md) / objectLiteralVariable

# objectLiteralVariable

\`\`\`ts
const objectLiteralVariable: {
  *: string;
  *foo*: string;
  <: string;
  <foo: string;
  <foo>: string;
  >: string;
  _: string;
  _foo_: string;
  prop_with_underscore: string;
  prop|with|pipes: string;
  valueA: number;
  valueB: boolean;
  valueX: {
     valueA: number[];
     valueY: (z) => {
        a: string;
        b: string;
        c: {
           a: number;
           b: number;
        };
     };
     valueZ: string;
  };
  valueY: (unionParam, _undercoreParam_) => string;
  |: string;
  ~: string;
};
\`\`\`

Comments for objectLiteralVariable

## Type declaration

| Member | Type | Description |
| :------ | :------ | :------ |
| \`*\` | \`string\` | - |
| \`*foo*\` | \`string\` | - |
| \`<\` | \`string\` | - |
| \`<foo\` | \`string\` | - |
| \`<foo>\` | \`string\` | - |
| \`>\` | \`string\` | - |
| \`_\` | \`string\` | - |
| \`_foo_\` | \`string\` | - |
| \`prop_with_underscore\` | \`string\` | - |
| prop\\|with\\|pipes | \`string\` | - |
| \`valueA\` | \`number\` | - |
| \`valueB\` | \`boolean\` | - |
| \`valueX\` | \\{   \`valueA\`: \`number\`[];   \`valueY\`: (\`z\`) => \\{      \`a\`: \`string\`;      \`b\`: \`string\`;      \`c\`: \\{         \`a\`: \`number\`;         \`b\`: \`number\`;      };   };   \`valueZ\`: \`string\`;   } | - |
| \`valueX.valueA\` | \`number\`[] | - |
| \`valueX.valueY\` | (\`z\`) => \\{   \`a\`: \`string\`;   \`b\`: \`string\`;   \`c\`: \\{      \`a\`: \`number\`;      \`b\`: \`number\`;   };   } | - |
| \`valueX.valueZ\` | \`string\` | - |
| \`valueY\` | (\`unionParam\`, \`_undercoreParam_\`) => \`string\` | - |
| \\| | \`string\` | - |
| \`~\` | \`string\` | - |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;
