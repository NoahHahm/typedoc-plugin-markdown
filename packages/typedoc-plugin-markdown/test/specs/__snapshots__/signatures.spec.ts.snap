// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signatures: should compile a promise that returns a symbol' 1`] = `
"\`\`\`ts
promiseReturningASymbol(): Promise<any>
\`\`\`

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`any\`\\>

[partial: sources]"
`;

exports[`Signatures: should compile a promise that returns an object' 1`] = `
"\`\`\`ts
promiseReturningAnObject(): Promise<{ data: string ; id: string  }>
\`\`\`

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<{ \`data\`: \`string\` ; \`id\`: \`string\`  }\\>

[partial: sources]"
`;

exports[`Signatures: should compile callable signature' 1`] = `
"\`\`\`ts
CallableSignature(): string
\`\`\`

## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile class with constructor' 1`] = `
"\`\`\`ts
new ClassWithConstructor(x: string, y: string): ClassWithConstructor
\`\`\`

### Parameters


| Name | Type |
| :------ | :------ |
| \`x\` | \`string\` |
| \`y\` | \`string\` |


### Returns

[\`ClassWithConstructor\`](../classes/ClassWithConstructor.md)

[partial: sources]"
`;

exports[`Signatures: should compile function that returns a function' 1`] = `
"\`\`\`ts
functionReturningAFunction(): Function
\`\`\`

Comments for function



## Returns

\`Function\`

Return comments

\`\`\`ts
<T>(x: string): boolean
\`\`\`

> ### Type parameters
>
> - \`T\`
>
> ### Parameters
>
> | Name | Type |
> | :------ | :------ |
> | \`x\` | \`string\` |
>
> ### Returns
>
> \`boolean\`
>
> [partial: sources]
>

[partial: sources]"
`;

exports[`Signatures: should compile function that returns an object' 1`] = `
"\`\`\`ts
functionReturningAnObject(): Object
\`\`\`

Comments for function



## Returns

\`Object\`

Return comments

- \`x\`: \`number\`

- \`y\`: \`number\`

[partial: sources]"
`;

exports[`Signatures: should compile function with nested typen params' 1`] = `
"\`\`\`ts
functionWithNestedParams(params: Object, context: any): boolean
\`\`\`

Some nested params.

## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \`Object\` | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \`Object\` | A nested object. |
| \`params.nestedObj.name\` | \`string\` | - |
| \`params.nestedObj.obj\` | \`Object\` | - |
| \`params.nestedObj.obj.name\` | () => \`void\` | - |
| \`params.nestedObj.value\` | \`number\` | - |
| \`params.parent?\` | \`number\` | - |
| \`context\` | \`any\` | The context of the method call. |


## Returns

\`boolean\`

[partial: sources]"
`;

exports[`Signatures: should compile function with reference type' 1`] = `
"\`\`\`ts
functionWithReferenceType(descriptor: TypedPropertyDescriptor<any>): boolean
\`\`\`

## Parameters


| Name | Type |
| :------ | :------ |
| \`descriptor\` | \`TypedPropertyDescriptor\`\\<\`any\`\\> |


## Returns

\`boolean\`

[partial: sources]"
`;

exports[`Signatures: should compile named parameters with comments' 1`] = `
"\`\`\`ts
functionWithNamedParamsAndComments(«destructured»: Object = {}, anotherParam: string): void
\`\`\`

FOO

## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`«destructured»\` | \`Object\` | various options |
| › \`bar?\` | \`number\` | - |
| › \`foo?\` | \`number\` | - |
| \`anotherParam\` | \`string\` | Another param comment |


## Returns

\`void\`

[partial: sources]"
`;

exports[`Signatures: should compile named parameters' 1`] = `
"\`\`\`ts
functionWithNamedParams(«destructured»: Object): string
\`\`\`

## Parameters


| Name | Type |
| :------ | :------ |
| \`«destructured»\` | \`Object\` |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile pipes in params and comments' 1`] = `
"\`\`\`ts
functionWithPipesInParamsAndComments(n: number): number | null
\`\`\`



## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`n\` | \`number\` | a\\|b |


## Returns

\`number\` \\| \`null\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with @return comments' 1`] = `
"\`\`\`ts
commentsInReturn(): boolean
\`\`\`

Comments with a return definition



## Returns

\`boolean\`

Return comments

[partial: sources]"
`;

exports[`Signatures: should compile signature with a flag' 1`] = `
"\`\`\`ts
Private privateFunction(): string
\`\`\`



## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with default values' 1`] = `
"\`\`\`ts
functionWithDefaults(
  valueA: string = 'defaultValue', 
  valueB: number = 100, 
  valueC: number = Number.NaN, 
  valueD: boolean = true, 
  valueE: boolean = null, 
  valueF: string = '<foo>'): string
\`\`\`

This is a function with a parameter that has a default value.

## Parameters


| Name | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | \`string\` | \`'defaultValue'\` | A parameter with a default string value. |
| \`valueB\` | \`number\` | \`100\` | A parameter with a default numeric value. |
| \`valueC\` | \`number\` | \`Number.NaN\` | A parameter with a default NaN value. |
| \`valueD\` | \`boolean\` | \`true\` | A parameter with a default boolean value. |
| \`valueE\` | \`boolean\` | \`null\` | A parameter with a default null value. |
| \`valueF\` | \`string\` | \`'<foo>'\` | - |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with optional params' 1`] = `
"\`\`\`ts
functionWithOptionalParam(requiredParam: string, optionalParam?: string): void
\`\`\`

This is a function with a parameter that is optional.

## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`requiredParam\` | \`string\` | A normal parameter. |
| \`optionalParam?\` | \`string\` | An optional parameter. |


## Returns

\`void\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with params' 1`] = `
"\`\`\`ts
functionWithParameters(paramZ: string, paramG: any, paramA: any): number
\`\`\`

This is a function with multiple arguments and a return value.

## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`paramZ\` | \`string\` | This is a string parameter. |
| \`paramG\` | \`any\` | This is a parameter flagged with any. |
| \`paramA\` | \`any\` | This is a **parameter** pointing to an interface. |


## Returns

\`number\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with rest params' 1`] = `
"\`\`\`ts
functionWithRest(...rest: string[]): string
\`\`\`

This is a function with rest parameter.

## Parameters


| Name | Type | Description |
| :------ | :------ | :------ |
| \`...rest\` | \`string\`[] | The rest parameter. |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with union types' 1`] = `
"\`\`\`ts
functionWithUnionTypes(arg: number | boolean[], ...args: (string | number)[]): any
\`\`\`

## Parameters


| Name | Type |
| :------ | :------ |
| \`arg\` | \`number\` \\| \`boolean\`[] |
| \`...args\` | (\`string\` \\| \`number\`)[] |


## Returns

\`any\`

[partial: sources]"
`;
