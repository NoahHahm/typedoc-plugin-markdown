// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signatures: should compile a promise that returns a symbol' 1`] = `
"> **promiseReturningASymbol**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\< \`any\` \\>

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\< \`any\` \\>



[partial: sources]"
`;

exports[`Signatures: should compile a promise that returns an object' 1`] = `
"> **promiseReturningAnObject**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\< \\{\`data\`: \`string\`; \`id\`: \`string\`;} \\>

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\< \\{\`data\`: \`string\`; \`id\`: \`string\`;} \\>



[partial: sources]"
`;

exports[`Signatures: should compile callable signature' 1`] = `
"> **CallableSignature**(): \`string\`

## Returns

\`string\`



[partial: sources]"
`;

exports[`Signatures: should compile class with constructor' 1`] = `
"## new ClassWithConstructor()

> **new ClassWithConstructor**(\`x\`, \`y\`): [\`ClassWithConstructor\`](classes/class.ClassWithConstructor.md)

### Parameters


| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |
| \`y\` | \`string\` |


### Returns

[\`ClassWithConstructor\`](classes/class.ClassWithConstructor.md)



[partial: sources]"
`;

exports[`Signatures: should compile function that returns a function' 1`] = `
"> **functionReturningAFunction**(): \\<T\\>(\`x\`) => \`boolean\`

Comments for function



## Returns

Return comments

> > \\<\`T\`\\>(\`x\`): \`boolean\`
>
> ### Type parameters
>
>
> | Parameter |
> | :------ |
> | \`T\` |
>
>
> ### Parameters
>
>
> | Parameter | Type |
> | :------ | :------ |
> | \`x\` | \`string\` |
>
>
> ### Returns
>
> \`boolean\`
>
>
>
> [partial: sources]



[partial: sources]"
`;

exports[`Signatures: should compile function that returns an object' 1`] = `
"> **functionReturningAnObject**(): \`object\`

Comments for function



## Returns

Return comments

### x

 **x**: \`number\`  = \`1\`

### y

 **y**: \`number\`  = \`2\`





[partial: sources]"
`;

exports[`Signatures: should compile function with nested typen params' 1`] = `
"> **functionWithNestedParams**(\`params\`, \`context\`): \`boolean\`

Some nested params.

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \`object\` | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \`object\` | A nested object. |
| \`params.nestedObj.name\` | \`string\` | - |
| \`params.nestedObj.obj\` | \`object\` | - |
| \`params.nestedObj.obj.name\` | () => \`void\` | - |
| \`params.nestedObj.value\` | \`number\` | - |
| \`params.parent\`? | \`number\` | - |
| \`context\` | \`any\` | The context of the method call. |


## Returns

\`boolean\`



[partial: sources]"
`;

exports[`Signatures: should compile function with reference type' 1`] = `
"> **functionWithReferenceType**(\`descriptor\`): \`boolean\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`descriptor\` | \`TypedPropertyDescriptor\`\\< \`any\` \\> |


## Returns

\`boolean\`



[partial: sources]"
`;

exports[`Signatures: should compile named parameters with comments' 1`] = `
"> **functionWithNamedParamsAndComments**(\`__namedParameters\` = \`{}\`, \`anotherParam\`): \`void\`

FOO

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`__namedParameters\` | \`object\` | various options |
| \`__namedParameters.bar\`? | \`number\` | - |
| \`__namedParameters.foo\`? | \`number\` | - |
| \`anotherParam\` | \`string\` | Another param comment |


## Returns

\`void\`



[partial: sources]"
`;

exports[`Signatures: should compile named parameters' 1`] = `
"> **functionWithNamedParams**(\`__namedParameters\`): \`string\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`__namedParameters\` | \`Object\` |


## Returns

\`string\`



[partial: sources]"
`;

exports[`Signatures: should compile pipes in params and comments' 1`] = `
"> **functionWithPipesInParamsAndComments**(\`n\`): \`number\` \\| \`null\`



## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`n\` | \`number\` | a\\|b |


## Returns

\`number\` \\| \`null\`



[partial: sources]"
`;

exports[`Signatures: should compile signature with @return comments' 1`] = `
"> **commentsInReturn**(): \`boolean\`

Comments with a return definition



## Returns

\`boolean\`

Return comments



[partial: sources]"
`;

exports[`Signatures: should compile signature with a flag' 1`] = `
"> \`private\` **privateFunction**(): \`string\`



## Returns

\`string\`



[partial: sources]"
`;

exports[`Signatures: should compile signature with default values' 1`] = `
"> **functionWithDefaults**(
  \`valueA\` = \`'defaultValue'\`, 
  \`valueB\` = \`100\`, 
  \`valueC\` = \`Number.NaN\`, 
  \`valueD\` = \`true\`, 
  \`valueE\` = \`null\`, 
  \`valueF\` = \`'<foo>'\`): \`string\`

This is a function with a parameter that has a default value.

## Parameters


| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | \`string\` | \`'defaultValue'\` | A parameter with a default string value. |
| \`valueB\` | \`number\` | \`100\` | A parameter with a default numeric value. |
| \`valueC\` | \`number\` | \`Number.NaN\` | A parameter with a default NaN value. |
| \`valueD\` | \`boolean\` | \`true\` | A parameter with a default boolean value. |
| \`valueE\` | \`boolean\` | \`null\` | A parameter with a default null value. |
| \`valueF\` | \`string\` | \`'<foo>'\` | - |


## Returns

\`string\`



[partial: sources]"
`;

exports[`Signatures: should compile signature with optional params' 1`] = `
"> **functionWithOptionalParam**(
  \`firstParamWithDefault\` = \`true\`, 
  \`requiredParam\`, 
  \`optionalParam\`?, 
  \`paramWithDefault\`? = \`0\`): \`void\`

This is a function with a parameter that is optional.

## Parameters


| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`firstParamWithDefault\` | \`boolean\` | \`true\` | - |
| \`requiredParam\` | \`string\` | \`undefined\` | A normal parameter. |
| \`optionalParam\`? | \`string\` | \`undefined\` | An optional parameter. |
| \`paramWithDefault\`? | \`number\` | \`0\` | - |


## Returns

\`void\`



[partial: sources]"
`;

exports[`Signatures: should compile signature with params' 1`] = `
"> **functionWithParameters**(
  \`paramZ\`, 
  \`paramG\`, 
  \`paramA\`): \`number\`

This is a function with multiple arguments and a return value.

## Example

\`\`\`ts
const example=true;
\`\`\`

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`paramZ\` | \`string\` | This is a string parameter. |
| \`paramG\` | \\{\`prop\`: \`string\`;} & \\{\`prop\`: \`number\`;} | This is a parameter with intersection type literal. |
| \`paramA\` | [\`PropInterface\`](interfaces/interface.PropInterface.md) | This is a **parameter** pointing to an interface. |


## Returns

\`number\`





[partial: sources]"
`;

exports[`Signatures: should compile signature with rest params' 1`] = `
"> **functionWithRest**(...\`rest\`): \`string\`

This is a function with rest parameter.

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| ...\`rest\` | \`string\`[] | The rest parameter. |


## Returns

\`string\`



[partial: sources]"
`;

exports[`Signatures: should compile signature with union types' 1`] = `
"> **functionWithUnionTypes**(\`arg\`, ...\`args\`): \`any\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`arg\` | \`number\` \\| \`boolean\`[] |
| ...\`args\` | (\`string\` \\| \`number\`)[] |


## Returns

\`any\`



[partial: sources]"
`;
