// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Signatures: should compile a promise that returns a symbol' 1`] = `
"> **promiseReturningASymbol**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`any\`\\>

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`any\`\\>

[partial: sources]"
`;

exports[`Signatures: should compile a promise that returns an object' 1`] = `
"> **promiseReturningAnObject**(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\\{\`data\`: \`string\`;
\`id\`: \`string\`;}\\>

## Returns

[\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\\{\`data\`: \`string\`;
\`id\`: \`string\`;}\\>

[partial: sources]"
`;

exports[`Signatures: should compile callable signature' 1`] = `
"> **CallableSignature**(): \`string\`

## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile class with constructor' 1`] = `
"> **new ClassWithConstructor**(\`x\`: \`string\`, \`y\`: \`string\`): [\`ClassWithConstructor\`](classes/classwithconstructor.md)

#### Parameters


| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |
| \`y\` | \`string\` |


#### Returns

[\`ClassWithConstructor\`](classes/classwithconstructor.md)

[partial: sources]"
`;

exports[`Signatures: should compile function that returns a function' 1`] = `
"Comments for function



> **functionReturningAFunction**(): \`Function\`

## Returns

\`Function\`

Return comments

> \\<T\\>(\`x\`: \`string\`): \`boolean\`

### Type parameters

- \`T\`


### Parameters


| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |


### Returns

\`boolean\`

[partial: sources]"
`;

exports[`Signatures: should compile function that returns an object' 1`] = `
"Comments for function



> **functionReturningAnObject**(): \`object\`

## Returns

\`object\`

Return comments


| Member | Type |
| :------ | :------ |
| \`x\` | \`number\` |
| \`y\` | \`number\` |


[partial: sources]"
`;

exports[`Signatures: should compile function with nested typen params' 1`] = `
"Some nested params.

> **functionWithNestedParams**(\`params\`: \`object\`, \`context\`: \`any\`): \`boolean\`

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \`object\` | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \`object\` | A nested object. |
| \`params.nestedObj.name\` | \`string\` | - |
| \`params.nestedObj.obj\` | \`object\` | - |
| \`params.nestedObj.obj.name\` | () => \`void\` | - |
| \`params.nestedObj.value\` | \`number\` | - |
| \`params.parent?\` | \`number\` | - |
| \`context?\` | \`any\` | The context of the method call. |


## Returns

\`boolean\`

[partial: sources]"
`;

exports[`Signatures: should compile function with reference type' 1`] = `
"> **functionWithReferenceType**(\`descriptor\`: \`TypedPropertyDescriptor\`\\<\`any\`\\>): \`boolean\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`descriptor\` | \`TypedPropertyDescriptor\`\\<\`any\`\\> |


## Returns

\`boolean\`

[partial: sources]"
`;

exports[`Signatures: should compile named parameters with comments' 1`] = `
"FOO

> **functionWithNamedParamsAndComments**(«destructured»: \`object\` = \`{}\`, \`anotherParam\`: \`string\`): \`void\`

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`«destructured»\` | \`object\` | various options |
| › \`bar?\` | \`number\` | - |
| › \`foo?\` | \`number\` | - |
| \`anotherParam?\` | \`string\` | Another param comment |


## Returns

\`void\`

[partial: sources]"
`;

exports[`Signatures: should compile named parameters' 1`] = `
"> **functionWithNamedParams**(«destructured»: \`Object\`): \`string\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`«destructured»\` | \`Object\` |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile pipes in params and comments' 1`] = `
"

> **functionWithPipesInParamsAndComments**(\`n\`: \`number\`): \`number\` \\| null

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`n\` | \`number\` | a\\|b |


## Returns

\`number\` \\| null

[partial: sources]"
`;

exports[`Signatures: should compile signature with @return comments' 1`] = `
"Comments with a return definition



> **commentsInReturn**(): \`boolean\`

## Returns

\`boolean\`

Return comments

[partial: sources]"
`;

exports[`Signatures: should compile signature with a flag' 1`] = `
"

> \`Private\` **privateFunction**(): \`string\`

## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with default values' 1`] = `
"This is a function with a parameter that has a default value.

> **functionWithDefaults**(\`valueA\`: \`string\` = \`'defaultValue'\`, \`valueB\`: \`number\` = \`100\`, \`valueC\`: \`number\` = \`Number.NaN\`, \`valueD\`: \`boolean\` = \`true\`, \`valueE\`: \`boolean\` = \`null\`, \`valueF\`: \`string\` = \`'<foo>'\`): \`string\`

## Parameters


| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | \`string\` | \`'defaultValue'\` | A parameter with a default string value. |
| \`valueB\` | \`number\` | \`100\` | A parameter with a default numeric value. |
| \`valueC\` | \`number\` | \`Number.NaN\` | A parameter with a default NaN value. |
| \`valueD\` | \`boolean\` | \`true\` | A parameter with a default boolean value. |
| \`valueE\` | \`boolean\` | \`null\` | A parameter with a default null value. |
| \`valueF\` | \`string\` | \`'<foo>'\` | - |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with optional params' 1`] = `
"This is a function with a parameter that is optional.

> **functionWithOptionalParam**(\`firstParamWithDefault\`: \`boolean\` = \`true\`, \`requiredParam\`: \`string\`, \`optionalParam\`?: \`string\`, \`paramWithDefault\`?: \`number\` = \`0\`): \`void\`

## Parameters


| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`firstParamWithDefault\` | \`boolean\` | \`true\` | - |
| \`requiredParam\` | \`string\` | \`undefined\` | A normal parameter. |
| \`optionalParam?\` | \`string\` | \`undefined\` | An optional parameter. |
| \`paramWithDefault?\` | \`number\` | \`0\` | - |


## Returns

\`void\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with params' 1`] = `
"This is a function with multiple arguments and a return value.

> **functionWithParameters**(\`paramZ\`: \`string\`, \`paramG\`: \\{\`prop\`: \`string\`;} & \\{\`prop\`: \`number\`;}, \`paramA\`: [\`PropInterface\`](interfaces/propinterface.md)): \`number\`

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`paramZ\` | \`string\` | This is a string parameter. |
| \`paramG\` | \\{\`prop\`: \`string\`;} & \\{\`prop\`: \`number\`;} | This is a parameter with intersection type literal. |
| \`paramA\` | [\`PropInterface\`](interfaces/propinterface.md) | This is a **parameter** pointing to an interface. |


## Returns

\`number\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with rest params' 1`] = `
"This is a function with rest parameter.

> **functionWithRest**(...\`rest\`: \`string\`[]): \`string\`

## Parameters


| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`...rest\` | \`string\`[] | The rest parameter. |


## Returns

\`string\`

[partial: sources]"
`;

exports[`Signatures: should compile signature with union types' 1`] = `
"> **functionWithUnionTypes**(\`arg\`: \`number\` \\| \`boolean\`[], ...\`args\`: (\`string\` \\| \`number\`)[]): \`any\`

## Parameters


| Parameter | Type |
| :------ | :------ |
| \`arg\` | \`number\` \\| \`boolean\`[] |
| \`...args\` | (\`string\` \\| \`number\`)[] |


## Returns

\`any\`

[partial: sources]"
`;
