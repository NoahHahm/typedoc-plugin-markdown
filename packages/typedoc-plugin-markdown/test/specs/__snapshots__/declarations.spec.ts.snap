// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
"> \`const\` **stringConstWithDefaultValue**: \`"hello"\` = \`'hello'\`

[partial: sources]

"
`;

exports[`Declarations: should compile a let with default value 1`] = `
"> \`let\` **stringLetWithDefaultValue**: \`string\` = \`'hello'\`

[partial: sources]

"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
"> \`let\` **undefinedNumberDeclaration**: \`number\`

[partial: sources]

"
`;

exports[`Declarations: should compile any function type 1`] = `
"> **AnyFunctionType**: <\`A\`> \`function\`

## Type parameters


| Parameter | Default |
| :------ | :------ |
| \`A\` | \`any\` |


## Parameters


| Parameter | Type |
| :------ | :------ |
| ...\`input\` | \`any\`[] |


## Returns

\`A\`



[partial: sources]

"
`;

exports[`Declarations: should compile declaration with accessors 1`] = `
"> \`let\` **getterAndSetter**: \`object\`

## Type declaration

### \`prop\`

> **prop**: \`string\`



***

### \`getMe\`

> \`get\` getMe(): [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\< \`string\` \\>



***

### \`setMe\`

> \`set\` setMe(\`x\`: \`string\`): \`void\`



[partial: sources]

"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
"> \`const\` **\\_\\_DOUBLE\\_UNDERSCORES\\_DECLARATION\\_\\_**: *typeof* [\`__DOUBLE_UNDERSCORES_DECLARATION__\`](variables/variable._DOUBLE_UNDERSCORES_DECLARATION__.md)

[partial: sources]

"
`;

exports[`Declarations: should compile enum declaration 1`] = `
"> **Down**: \`1\`

[partial: sources]

"
`;

exports[`Declarations: should compile enum declaration with defaults 1`] = `
"> **East**: \`"East"\`

[partial: sources]

"
`;

exports[`Declarations: should compile function declaration 1`] = `
"> **functionDeclaration**

[partial: sources]

"
`;

exports[`Declarations: should compile indexable declaration 1`] = `
"> \`let\` **indexableDeclaration**: \`object\`

## Index signature

 \\[\`index\`: \`number\`\\]: \`string\`

## Type declaration

### \`arg1\`

> **arg1**: \`string\`



[partial: sources]

"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
"> \`const\` **objectLiteralAsConstDeclaration**: \`object\`

## Type declaration

### \`Prop1\`

> \`readonly\` **Prop1**: \`"Prop1"\` = \`'Prop1'\`



***

### \`Prop2\`

> \`readonly\` **Prop2**: \`"Prop2"\` = \`'Prop2'\`



***

### \`Prop3\`

> \`readonly\` **Prop3**: \`"Prop3"\` = \`'Prop3'\`



[partial: sources]

"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
"> \`const\` **objectLiteralDeclaration**: \`object\`

Comments for object literal

## Type declaration

### \`valueA\`

> **valueA**: \`number\` = \`100\`

Comment for valueA



***

### \`valueB\`

> **valueB**: \`boolean\` = \`true\`



***

### \`valueC\`

> **valueC**: \`object\` = \`{}\`



***

### \`valueX\`

> **valueX**: \`object\`

Comment for valueX

#### Type declaration

> ##### \`valueX.valueA\`
>
> > **valueA**: \`number\`[]
>
> Comment for valueA
>
> ##### \`valueX.valueB\`
>
> > **valueB**: \`object\`
>
> ###### Type declaration
>
> > ###### \`valueB.valueB1\`
> >
> > > **valueB1**: \`number\` = \`1\`
> >
> > ###### \`valueB.valueB2\`
> >
> > > **valueB2**: \`number\` = \`2\`
> >
> >
>
> ##### \`valueX.valueZ\`
>
> > **valueZ**: \`string\` = \`'foo'\`
>
> Comment for valueZ
>
>



***

### \`valueY\`

> **valueY**: \`function\`

Comment for value Y

#### Returns

\`string\`







***

### \`valueZ\`

> **valueZ**: \`string\` = \`'foo'\`

Comment for valueZ



[partial: sources]

"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
"> \`let\` **typeLiteralDeclaration**: \`object\`

## Type declaration

### \`valueA\`

> \`optional\` **valueA**: \`number\`

Comments for valueA



***

### \`valueB\`

> \`optional\` **valueB**: \`boolean\`



***

### \`valueC\`

> **valueC**: \`object\`

#### Index signature

 \\[\`dataId\`: \`string\`\\]: \`"ok"\` \\| \`"ko"\`



***

### \`valueX\`

> **valueX**: \`object\`

Comment for valueX

#### Type declaration

> ##### \`valueX.valueA\`
>
> > **valueA**: \`number\`[]
>
> ##### \`valueX.valueY\`
>
> > **valueY**: \`function\`
>
> Nested comment for valueX.valueY
>
> ###### Parameters
>
>
> | Parameter | Type |
> | :------ | :------ |
> | \`z\` | \`string\` |
>
>
> ###### Returns
>
> ###### \`a\`
>
> > **a**: \`string\`
>
> ###### \`b\`
>
> > **b**: \`string\`
>
>
>
>
>
>
>
> ##### \`valueX.valueZ\`
>
> > **valueZ**: \`string\`
>
> Nested comment for valueX.valueZ
>
>



***

### \`valueY\`

> **valueY**: \`function\`

#### Returns

\`string\`





***

### \`valueZ\`

> **valueZ**: \`string\`

Comment for valueZ



[partial: sources]

"
`;
