// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
">  \`Const\` **stringConstWithDefaultValue**: "hello"  = \`'hello'\`

[partial: sources]"
`;

exports[`Declarations: should compile a let with default value 1`] = `
">  **stringLetWithDefaultValue**: \`string\`  = \`'hello'\`

[partial: sources]"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
">  **undefinedNumberDeclaration**: \`number\`

[partial: sources]"
`;

exports[`Declarations: should compile any function type 1`] = `
">  **AnyFunctionType**: \\<\`A\`\\> \`Function\`

## Type parameters

- \`A\` = \`any\`


## Type declaration

> (...\`input\`: \`any\`[]): \`A\`;

### Parameters


| Parameter | Type |
| :------ | :------ |
| \`...input\` | \`any\`[] |


### Returns

\`A\`

[partial: sources]"
`;

exports[`Declarations: should compile declaration with accessors 1`] = `
">  **getterAndSetter**: \`object\`

## Type declaration


| Member | Type |
| :------ | :------ |
| \`prop\` | \`string\` |
| **get** \`getMe\`() | [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`string\`\\> |
| **set** \`setMe\`(\`x\`: \`string\`) | \`void\` |


[partial: sources]"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
">  \`Const\` **\\_\\_DOUBLE\\_UNDERSCORES\\_DECLARATION\\_\\_**: *typeof* [\`__DOUBLE_UNDERSCORES_DECLARATION__\`](variables/double-underscores-declaration.md)

Comments

[partial: sources]"
`;

exports[`Declarations: should compile enum declaration 1`] = `
">  **Down**: 1

[partial: sources]"
`;

exports[`Declarations: should compile enum declaration with defaults 1`] = `
">  **East**: "East"

[partial: sources]"
`;

exports[`Declarations: should compile function declaration 1`] = `"[partial: sources]"`;

exports[`Declarations: should compile indexable declaration 1`] = `
">  **indexableDeclaration**: \`object\`

## Index signature

 \\[\`index\`: \`number\`\\]: \`string\`

## Type declaration


| Member | Type |
| :------ | :------ |
| \`arg1\` | \`string\` |


[partial: sources]"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
">  \`Const\` **objectLiteralAsConstDeclaration**: \`object\`

## Type declaration


| Member | Type |
| :------ | :------ |
| \`Prop1\` | "Prop1" |
| \`Prop2\` | "Prop2" |
| \`Prop3\` | "Prop3" |


[partial: sources]"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
">  \`Const\` **objectLiteralDeclaration**: \`object\`

Comments for object literal

## Type declaration


| Member | Type | Description |
| :------ | :------ | :------ |
| \`valueA\` | \`number\` | Comment for valueA |
| \`valueB\` | \`boolean\` | - |
| \`valueC\` | \`object\` | - |
| \`valueX\` | \`object\` | Comment for valueX |
| \`valueX.valueA\` | \`number\`[] | Comment for valueA |
| \`valueX.valueZ\` | \`string\` | Comment for valueZ |
| \`valueY\` | () => \`string\` | Comment for value Y |
| \`valueZ\` | \`string\` | Comment for valueZ |


[partial: sources]"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
">  **typeLiteralDeclaration**: \`object\`

## Type declaration


| Member | Type | Description |
| :------ | :------ | :------ |
| \`valueA\`? | \`number\` | Comments for valueA |
| \`valueB\`? | \`boolean\` | - |
| \`valueC\` | \\{} | - |
| \`valueX\` | \`object\` | Comment for valueX |
| \`valueX.valueA\` | \`number\`[] | - |
| \`valueX.valueY\` | (\`z\`: \`string\`) => \\{\`a\`: \`string\`;<br />\`b\`: \`string\`;} | Nested comment for valueX.valueY |
| \`valueX.valueZ\` | \`string\` | Nested comment for valueX.valueZ |
| \`valueY\` | () => \`string\` | - |
| \`valueZ\` | \`string\` | Comment for valueZ |


[partial: sources]"
`;
