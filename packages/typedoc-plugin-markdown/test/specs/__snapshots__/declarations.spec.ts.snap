// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Declarations: should compile a const with default value 1`] = `
"> \`const\` **stringConstWithDefaultValue**: "hello"  = \`'hello'\`

[partial: sources]

"
`;

exports[`Declarations: should compile a let with default value 1`] = `
"> \`let\` **stringLetWithDefaultValue**: \`string\`  = \`'hello'\`

[partial: sources]

"
`;

exports[`Declarations: should compile an undefined declaration 1`] = `
"> \`let\` **undefinedNumberDeclaration**: \`number\`

[partial: sources]

"
`;

exports[`Declarations: should compile any function type 1`] = `
"> **AnyFunctionType**: \\<\`A\`\\> \`Function\`

[partial: sources]

## Type parameters


| Parameter | Default |
| :------ | :------ |
| A | \`any\` |


## Type declaration

> (...input: \`any\`[]): \`A\`
>
> [partial: sources]
>
> ### Parameters
>
>
> | Parameter | Type |
> | :------ | :------ |
> | ...input | \`any\`[] |
>
>
> ### Returns
>
> \`A\`
>
>

"
`;

exports[`Declarations: should compile declaration with accessors 1`] = `
"> \`let\` **getterAndSetter**: \`object\`

[partial: sources]

## Type declaration

### prop

> **prop**: \`string\`

[partial: sources]



### getMe

> get **getMe()**: [\`Promise\`]( https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise )\\<\`string\`\\>

[partial: sources]



### setMe

> set **setMe**(x: \`string\`): \`void\`

[partial: sources]



"
`;

exports[`Declarations: should compile declaration with double underscores in name and value 1`] = `
"> \`const\` **\\_\\_DOUBLE\\_UNDERSCORES\\_DECLARATION\\_\\_**: *typeof* [\`__DOUBLE_UNDERSCORES_DECLARATION__\`](variables/variable.__DOUBLE_UNDERSCORES_DECLARATION__.md)

Comments

[partial: sources]

"
`;

exports[`Declarations: should compile enum declaration 1`] = `
"> **Down**: 1

[partial: sources]

"
`;

exports[`Declarations: should compile enum declaration with defaults 1`] = `
"> **East**: "East"

[partial: sources]

"
`;

exports[`Declarations: should compile function declaration 1`] = `
"> **functionDeclaration**

[partial: sources]

"
`;

exports[`Declarations: should compile indexable declaration 1`] = `
"> \`let\` **indexableDeclaration**: \`object\`

[partial: sources]

## Index signature

 \\[\`index\`: \`number\`\\]: \`string\`

## Type declaration

### arg1

> **arg1**: \`string\`

[partial: sources]



"
`;

exports[`Declarations: should compile object literal cast as a const 1`] = `
"> \`const\` **objectLiteralAsConstDeclaration**: \`object\`

[partial: sources]

## Type declaration

### Prop1

> \`readonly\` **Prop1**: "Prop1"  = \`'Prop1'\`

[partial: sources]



### Prop2

> \`readonly\` **Prop2**: "Prop2"  = \`'Prop2'\`

[partial: sources]



### Prop3

> \`readonly\` **Prop3**: "Prop3"  = \`'Prop3'\`

[partial: sources]



"
`;

exports[`Declarations: should compile object literal declaration 1`] = `
"> \`const\` **objectLiteralDeclaration**: \`object\`

Comments for object literal

[partial: sources]

## Type declaration

### valueA

> **valueA**: \`number\`  = \`100\`

Comment for valueA

[partial: sources]



### valueB

> **valueB**: \`boolean\`  = \`true\`

[partial: sources]



### valueC

> **valueC**: \`object\`  = \`{}\`

[partial: sources]

#### Type declaration



### valueX

> **valueX**: \`object\`

Comment for valueX

[partial: sources]

#### Type declaration

##### valueA

> **valueA**: \`number\`[]

Comment for valueA

[partial: sources]



##### valueB

> **valueB**: \`object\`

[partial: sources]

###### Type declaration

###### valueB1

> **valueB1**: \`number\`  = \`1\`

[partial: sources]



###### valueB2

> **valueB2**: \`number\`  = \`2\`

[partial: sources]





##### valueZ

> **valueZ**: \`string\`  = \`'foo'\`

Comment for valueZ

[partial: sources]





### valueY

> **valueY**: \`Function\`

[partial: sources]

#### Type declaration

> (): \`string\`
>
> Comment for value Y
>
> [partial: sources]
>
> ##### Returns
>
> \`string\`
>
>



### valueZ

> **valueZ**: \`string\`  = \`'foo'\`

Comment for valueZ

[partial: sources]



"
`;

exports[`Declarations: should compile type literal declaration 1`] = `
"> \`let\` **typeLiteralDeclaration**: \`object\`

[partial: sources]

## Type declaration

### valueA

> **valueA**?: \`number\`

Comments for valueA

[partial: sources]



### valueB

> **valueB**?: \`boolean\`

[partial: sources]



### valueC

> **valueC**: \`object\`

[partial: sources]

#### Index signature

 \\[\`dataId\`: \`string\`\\]: "ok" \\| "ko"

#### Type declaration



### valueX

> **valueX**: \`object\`

Comment for valueX

[partial: sources]

#### Type declaration

##### valueA

> **valueA**: \`number\`[]

[partial: sources]



##### valueY

> **valueY**: \`Function\`

[partial: sources]

###### Type declaration

> (z: \`string\`): \`object\`
>
> Nested comment for valueX.valueY
>
> [partial: sources]
>
> ###### Parameters
>
>
> | Parameter | Type |
> | :------ | :------ |
> | z | \`string\` |
>
>
> ###### Returns
>
> \`object\`
>
> ###### a
>
> > **a**: \`string\`
>
> [partial: sources]
>
>
>
> ###### b
>
> > **b**: \`string\`
>
> [partial: sources]
>
>
>
>



##### valueZ

> **valueZ**: \`string\`

Nested comment for valueX.valueZ

[partial: sources]





### valueY

> **valueY**: \`Function\`

[partial: sources]

#### Type declaration

> (): \`string\`
>
> [partial: sources]
>
> ##### Returns
>
> \`string\`
>
>



### valueZ

> **valueZ**: \`string\`

Comment for valueZ

[partial: sources]



"
`;
