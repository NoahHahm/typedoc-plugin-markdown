// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Function Reflection should compile function returning a function: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionReturningAFunction

# Function: functionReturningAFunction()

> **functionReturningAFunction**(): \\<\`T\`\\>(\`x\`) => \`boolean\`

Comments for function

## Returns

> > \\<\`T\`\\>(\`x\`): \`boolean\`
>
> ### Type parameters
>
> ▪ **T**
>
> ### Parameters
>
> ▪ **x**: \`string\`
>
> ### Source
>
> [functions.ts:126](source-url)
>

## Source

[functions.ts:125](source-url)
"
`;

exports[`Function Reflection should compile function returning a function: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionReturningAFunction

# functionReturningAFunction()

\`\`\`ts
functionReturningAFunction(): <T>(x) => boolean
\`\`\`

Comments for function

## Returns

> \`\`\`ts
> <T>(x): boolean
> \`\`\`
>
> ### Type parameters
>
> | Parameter |
> | :------ |
> | \`T\` |
>
> ### Parameters
>
> | Parameter | Type |
> | :------ | :------ |
> | \`x\` | \`string\` |
>

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function returning a promise: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionReturningAPromise

# Function: functionReturningAPromise()

> **functionReturningAPromise**(): \`Promise\`\\<\`object\`\\>

Comments for function

## Returns

Return comments

## Source

[functions.ts:133](source-url)
"
`;

exports[`Function Reflection should compile function returning a promise: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionReturningAPromise

# functionReturningAPromise()

\`\`\`ts
functionReturningAPromise(): Promise<{
  prop: string;
}>
\`\`\`

Comments for function

## Returns

Return comments

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function returning an object: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionReturningAnObject

# Function: functionReturningAnObject()

> **functionReturningAnObject**(): \`object\`

Comments for function

## Returns

Return comments

> ### x
>
> > **x**: \`number\` = \`1\`
>
> ### y
>
> > **y**: \`number\` = \`2\`
>

## Source

[functions.ts:118](source-url)
"
`;

exports[`Function Reflection should compile function returning an object: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionReturningAnObject

# functionReturningAnObject()

\`\`\`ts
functionReturningAnObject(): {
  x: number;
  y: number;
}
\`\`\`

Comments for function

## Returns

Return comments

> | Member | Type | Description |
> | :------ | :------ | :------ |
> | \`x\` | \`number\` | - |
> | \`y\` | \`number\` | - |
>

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with a parameter: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > basicFunction

# Function: basicFunction()

> **basicFunction**(\`someParam\`): \`number\`

This is a function that is assigned to a variable.

## Parameters

▪ **someParam**: \`number\`

This is some numeric parameter.

## Source

[functions.ts:10](source-url)
"
`;

exports[`Function Reflection should compile function with a parameter: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > basicFunction

# basicFunction()

\`\`\`ts
basicFunction(someParam): number
\`\`\`

This is a function that is assigned to a variable.

## Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`someParam\` | \`number\` | This is some numeric parameter. |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with default parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithDefaultParameters

# Function: functionWithDefaultParameters()

> **functionWithDefaultParameters**(\`valueA\`, \`valueB\`, \`valueC\`, \`valueD\`, \`valueE\`, \`valueF\`): \`string\`

This is a function with a parameter that has a default value.

## Parameters

▪ **valueA**: \`string\`= \`'defaultValue'\`

A parameter with a default string value.

▪ **valueB**: \`number\`= \`100\`

A parameter with a default numeric value.

▪ **valueC**: \`number\`= \`Number.NaN\`

A parameter with a default NaN value.

▪ **valueD**: \`boolean\`= \`true\`

A parameter with a default boolean value.

▪ **valueE**: \`boolean\`= \`true\`

A parameter with a default null value.

▪ **valueF**: \`string\`= \`'<foo>'\`

## Source

[functions.ts:23](source-url)
"
`;

exports[`Function Reflection should compile function with default parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithDefaultParameters

# functionWithDefaultParameters()

\`\`\`ts
functionWithDefaultParameters(
   valueA, 
   valueB, 
   valueC, 
   valueD, 
   valueE, 
   valueF): string
\`\`\`

This is a function with a parameter that has a default value.

## Parameters

| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`valueA\` | \`string\` | \`'defaultValue'\` | A parameter with a default string value. |
| \`valueB\` | \`number\` | \`100\` | A parameter with a default numeric value. |
| \`valueC\` | \`number\` | \`Number.NaN\` | A parameter with a default NaN value. |
| \`valueD\` | \`boolean\` | \`true\` | A parameter with a default boolean value. |
| \`valueE\` | \`boolean\` | \`true\` | A parameter with a default null value. |
| \`valueF\` | \`string\` | \`'<foo>'\` | - |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with multiple signatures: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithMultipleSignatures

# Function: functionWithMultipleSignatures()

## functionWithMultipleSignatures(value)

> **functionWithMultipleSignatures**(\`value\`): \`string\`

This is the first signature of a function with multiple signatures.

### Parameters

▪ **value**: \`string\`

The name value.

### Source

[functions.ts:96](source-url)

## functionWithMultipleSignatures(value)

> **functionWithMultipleSignatures**(\`value\`): \`string\`

This is the second signature of a function with multiple signatures.

### Parameters

▪ **value**: \`object\`

An object containing the name value.

▪ **value.name**: \`string\`

A value of the object.

### Source

[functions.ts:104](source-url)
"
`;

exports[`Function Reflection should compile function with multiple signatures: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithMultipleSignatures

# functionWithMultipleSignatures()

## functionWithMultipleSignatures(value)

\`\`\`ts
functionWithMultipleSignatures(value): string
\`\`\`

This is the first signature of a function with multiple signatures.

### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`value\` | \`string\` | The name value. |

## functionWithMultipleSignatures(value)

\`\`\`ts
functionWithMultipleSignatures(value): string
\`\`\`

This is the second signature of a function with multiple signatures.

### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`value\` | \\{   \`name\`: \`string\`;   } | An object containing the name value. |
| \`value.name\` | \`string\` | A value of the object. |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with named params: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithNamedParams

# Function: functionWithNamedParams()

> **functionWithNamedParams**(\`__namedParameters\`, \`anotherParam\`): \`void\`

## Parameters

▪ **\\_\\_namedParameters**: \`object\`= \`{}\`

various options

▪ **\\_\\_namedParameters.bar?**: \`number\`

▪ **\\_\\_namedParameters.foo?**: \`number\`

▪ **anotherParam**: \`string\`

Another param comment

## Source

[functions.ts:76](source-url)
"
`;

exports[`Function Reflection should compile function with named params: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithNamedParams

# functionWithNamedParams()

\`\`\`ts
functionWithNamedParams(__namedParameters, anotherParam): void
\`\`\`

## Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`__namedParameters\` | \\{   \`bar\`: \`number\`;   \`foo\`: \`number\`;   } | various options |
| \`__namedParameters.bar\`? | \`number\` | - |
| \`__namedParameters.foo\`? | \`number\` | - |
| \`anotherParam\` | \`string\` | Another param comment |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with nested parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithNestedParameters

# Function: functionWithNestedParameters()

> **functionWithNestedParameters**(\`params\`, \`context\`): \`boolean\`

Some nested params.

## Parameters

▪ **params**: \`object\`

The parameters passed to the method.

▪ **params.name**: \`string\`

The name of the new group.

▪ **params.nestedObj**: \`object\`

A nested object.

▪ **params.nestedObj.name**: \`string\`

▪ **params.nestedObj.obj**: \`object\`

▪ **params.nestedObj.obj.name**: () => \`void\`

▪ **params.nestedObj.value**: \`number\`

▪ **params.parent?**: \`number\`

▪ **context**: \`any\`

The context of the method call.

## Source

[functions.ts:54](source-url)
"
`;

exports[`Function Reflection should compile function with nested parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithNestedParameters

# functionWithNestedParameters()

\`\`\`ts
functionWithNestedParameters(params, context): boolean
\`\`\`

Some nested params.

## Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`params\` | \\{   \`name\`: \`string\`;   \`nestedObj\`: \\{      \`name\`: \`string\`;      \`obj\`: \\{         \`name\`: () => \`void\`;      };      \`value\`: \`number\`;   };   \`parent\`: \`number\`;   } | The parameters passed to the method. |
| \`params.name\` | \`string\` | The name of the new group. |
| \`params.nestedObj\` | \\{   \`name\`: \`string\`;   \`obj\`: \\{      \`name\`: () => \`void\`;   };   \`value\`: \`number\`;   } | A nested object. |
| \`params.nestedObj.name\` | \`string\` | - |
| \`params.nestedObj.obj\` | \\{   \`name\`: () => \`void\`;   } | - |
| \`params.nestedObj.obj.name\` | () => \`void\` | - |
| \`params.nestedObj.value\` | \`number\` | - |
| \`params.parent\`? | \`number\` | - |
| \`context\` | \`any\` | The context of the method call. |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with optional parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithOptionalParameters

# Function: functionWithOptionalParameters()

> **functionWithOptionalParameters**(\`firstParamWithDefault\`, \`requiredParam\`, \`optionalParam\`?, \`paramWithDefault\`?): \`void\`

This is a function with a parameters.

## Parameters

▪ **firstParamWithDefault**: \`boolean\`= \`true\`

▪ **requiredParam**: \`string\`

A normal parameter.

▪ **optionalParam?**: \`string\`

An optional parameter.

▪ **paramWithDefault?**: \`number\`= \`0\`

## Source

[functions.ts:40](source-url)
"
`;

exports[`Function Reflection should compile function with optional parameters: (Output File Strategy "members") (Option Group "1") 2`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithOptionalParameters

# Function: functionWithOptionalParameters()

> **functionWithOptionalParameters**(\`firstParamWithDefault\`, \`requiredParam\`, \`optionalParam\`?, \`paramWithDefault\`?): \`void\`

This is a function with a parameters.

## Parameters

▪ **firstParamWithDefault**: \`boolean\`= \`true\`

▪ **requiredParam**: \`string\`

A normal parameter.

▪ **optionalParam?**: \`string\`

An optional parameter.

▪ **paramWithDefault?**: \`number\`= \`0\`

## Source

[functions.ts:40](source-url)
"
`;

exports[`Function Reflection should compile function with optional parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithOptionalParameters

# functionWithOptionalParameters()

\`\`\`ts
functionWithOptionalParameters(
   firstParamWithDefault, 
   requiredParam, 
   optionalParam?, 
   paramWithDefault?): void
\`\`\`

This is a function with a parameters.

## Parameters

| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`firstParamWithDefault\` | \`boolean\` | \`true\` | - |
| \`requiredParam\` | \`string\` | \`undefined\` | A normal parameter. |
| \`optionalParam\`? | \`string\` | \`undefined\` | An optional parameter. |
| \`paramWithDefault\`? | \`number\` | \`0\` | - |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with optional parameters: (Output File Strategy "members") (Option Group "2") 2`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithOptionalParameters

# functionWithOptionalParameters()

\`\`\`ts
functionWithOptionalParameters(
   firstParamWithDefault, 
   requiredParam, 
   optionalParam?, 
   paramWithDefault?): void
\`\`\`

This is a function with a parameters.

## Parameters

| Parameter | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`firstParamWithDefault\` | \`boolean\` | \`true\` | - |
| \`requiredParam\` | \`string\` | \`undefined\` | A normal parameter. |
| \`optionalParam\`? | \`string\` | \`undefined\` | An optional parameter. |
| \`paramWithDefault\`? | \`number\` | \`0\` | - |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;

exports[`Function Reflection should compile function with type parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"**typedoc-stubs** ∙ [README](../README.md) ∙ [API](../exports.md)

***

[API](../exports.md) > functionWithTypeParameters

# Function: functionWithTypeParameters()

> **functionWithTypeParameters**\\<\`T\`, \`Item\`\\>(): \`boolean\`

Function with type parameters

## Type parameters

▪ **T**

Comments for T

▪ **Item** = \`string\` \\| \`boolean\`

## Source

[functions.ts:89](source-url)
"
`;

exports[`Function Reflection should compile function with type parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"**typedoc-stubs**

***

[API](../index.md) > functionWithTypeParameters

# functionWithTypeParameters()

\`\`\`ts
functionWithTypeParameters<T, Item>(): boolean
\`\`\`

Function with type parameters

## Type parameters

| Parameter | Default | Description |
| :------ | :------ | :------ |
| \`T\` | - | Comments for T |
| \`Item\` | \`string\` \\| \`boolean\` | - |

***

Generated using [typedoc-plugin-markdown](https://www.npmjs.com/package/typedoc-plugin-markdown) and [TypeDoc](https://typedoc.org/)
"
`;
